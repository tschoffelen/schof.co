service: schofco-website

plugins:
  - serverless-s3-sync
  - serverless-cloudfront-invalidate

custom:
  s3Sync:
    - bucketName: schof.co
      localDir: public/
      acl: public-read
      followSymlinks: true
      deleteRemoved: false
      defaultContentType: text/html
  cloudfrontInvalidate:
    - distributionId: EO1YEJXL0AGGJ
      items:
        - "/"
        - "/*"
        - "/page-data/index/page-data.json"

# Provider config
provider:
  name: aws
  stage: ${opt:stage, 'production'}
  region: ${opt:region, 'eu-west-1'}
  lambdaHashingVersion: 20201221
  environment:
    NODE_ENV: ${opt:stage, 'production'}
    TABLE_NAME: ${self:service}
    BOX_BUCKET: schof-box
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:GetObject
            - s3:ListBucket
            - s3:ListBucketVersions
          Resource:
            - 'arn:aws:s3:::schof-box'
            - 'arn:aws:s3:::schof-box/*'
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:DescribeTable
          Resource:
            - "*"

# Deployment packaging settings
package:
  individually: true
  excludeDevDependencies: false
  patterns:
    - '!**'
    - src/functions/*.js
    - node_modules/axios/**
    - node_modules/follow-redirects/**
    - node_modules/rss/**
    - node_modules/rss-parser/**
    - node_modules/entities/**
    - node_modules/xml2js/**

# Lambda functions
functions:
  box:
    handler: src/functions/box.handler
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: /box/get-url
          method: get
          cors: true
  download-posts:
    handler: src/functions/download-posts.handler
    memorySize: 512
    timeout: 30
    events:
      - schedule: rate(4 hours)

# CloudFormation resources
resources:
  Resources:
    BoxBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: schof-box
        AccelerateConfiguration:
          AccelerationStatus: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: [ '*' ]
              AllowedMethods: [ GET, PUT ]
              AllowedOrigins: [ '*' ]
              Id: CORSRuleId1
              MaxAge: '3600'
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: type-sk
            KeySchema:
              - AttributeName: type
                KeyType: HASH
              - AttributeName: sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

